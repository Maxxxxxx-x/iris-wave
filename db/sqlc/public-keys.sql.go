// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public-keys.sql

package db

import (
	"context"

	"github.com/oklog/ulid"
)

const addPublicKey = `-- name: AddPublicKey :one
INSERT INTO PublicKeys (Id, PubKey) VALUES ($1, $2) RETURNING id, pubkey
`

type AddPublicKeyParams struct {
	ID     ulid.ULID `json:"id"`
	Pubkey []byte    `json:"pubkey"`
}

func (q *Queries) AddPublicKey(ctx context.Context, arg AddPublicKeyParams) (Publickey, error) {
	row := q.db.QueryRow(ctx, addPublicKey, arg.ID, arg.Pubkey)
	var i Publickey
	err := row.Scan(&i.ID, &i.Pubkey)
	return i, err
}

const deletePublicKey = `-- name: DeletePublicKey :exec
DELETE FROM PublicKeys WHERE Id = $1
`

func (q *Queries) DeletePublicKey(ctx context.Context, id ulid.ULID) error {
	_, err := q.db.Exec(ctx, deletePublicKey, id)
	return err
}

const getAllPublicKeys = `-- name: GetAllPublicKeys :many
SELECT id, pubkey FROM PublicKeys
`

func (q *Queries) GetAllPublicKeys(ctx context.Context) ([]Publickey, error) {
	rows, err := q.db.Query(ctx, getAllPublicKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Publickey{}
	for rows.Next() {
		var i Publickey
		if err := rows.Scan(&i.ID, &i.Pubkey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicKey = `-- name: GetPublicKey :one
SELECT id, pubkey FROM PublicKeys WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetPublicKey(ctx context.Context, id ulid.ULID) (Publickey, error) {
	row := q.db.QueryRow(ctx, getPublicKey, id)
	var i Publickey
	err := row.Scan(&i.ID, &i.Pubkey)
	return i, err
}
