// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/oklog/ulid"
)

const addUser = `-- name: AddUser :one
INSERT INTO Users (
    Id, Email, Password, Role, UpdatedAt
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, email, password, role, updatedat
`

type AddUserParams struct {
	ID        ulid.ULID          `json:"id"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
	Role      Roles              `json:"role"`
	Updatedat pgtype.Timestamptz `json:"updatedat"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Updatedat,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Updatedat,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users WHERE Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id ulid.ULID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, password, role, updatedat FROM Users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, role, updatedat FROM Users WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, id ulid.ULID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Updatedat,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, role, updatedat FROM Users WHERE Id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id ulid.ULID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Updatedat,
	)
	return i, err
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT id, email, password, role, updatedat FROM Users WHERE Role = $1
`

func (q *Queries) GetUsersByRole(ctx context.Context, role Roles) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE Users SET Password = $2, UpdatedAt = $3 WHERE Id = $1
`

type UpdatePasswordParams struct {
	ID        ulid.ULID          `json:"id"`
	Password  string             `json:"password"`
	Updatedat pgtype.Timestamptz `json:"updatedat"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password, arg.Updatedat)
	return err
}

const updatePlatformRole = `-- name: UpdatePlatformRole :exec
UPDATE Users SET Role = $2, UpdatedAt = $3 WHERE Id = $1
`

type UpdatePlatformRoleParams struct {
	ID        ulid.ULID          `json:"id"`
	Role      Roles              `json:"role"`
	Updatedat pgtype.Timestamptz `json:"updatedat"`
}

func (q *Queries) UpdatePlatformRole(ctx context.Context, arg UpdatePlatformRoleParams) error {
	_, err := q.db.Exec(ctx, updatePlatformRole, arg.ID, arg.Role, arg.Updatedat)
	return err
}
