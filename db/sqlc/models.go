// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/oklog/ulid"
)

type Roles string

const (
	RolesOwner Roles = "owner"
	RolesAdmin Roles = "admin"
	RolesUser  Roles = "user"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles `json:"roles"`
	Valid bool  `json:"valid"` // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type Tokenactions string

const (
	TokenactionsCreateToken Tokenactions = "create-token"
	TokenactionsGetTokens   Tokenactions = "get-tokens"
	TokenactionsRevokeToken Tokenactions = "revoke-token"
)

func (e *Tokenactions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Tokenactions(s)
	case string:
		*e = Tokenactions(s)
	default:
		return fmt.Errorf("unsupported scan type for Tokenactions: %T", src)
	}
	return nil
}

type NullTokenactions struct {
	Tokenactions Tokenactions `json:"tokenactions"`
	Valid        bool         `json:"valid"` // Valid is true if Tokenactions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTokenactions) Scan(value interface{}) error {
	if value == nil {
		ns.Tokenactions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Tokenactions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTokenactions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Tokenactions), nil
}

type Useractions string

const (
	UseractionsCreateAccount  Useractions = "create-account"
	UseractionsGetAccounts    Useractions = "get-accounts"
	UseractionsLoginAccount   Useractions = "login-account"
	UseractionsUpdateAccount  Useractions = "update-account"
	UseractionsDeleteAccount  Useractions = "delete-account"
	UseractionsSendInviteMail Useractions = "send-invite-mail"
)

func (e *Useractions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Useractions(s)
	case string:
		*e = Useractions(s)
	default:
		return fmt.Errorf("unsupported scan type for Useractions: %T", src)
	}
	return nil
}

type NullUseractions struct {
	Useractions Useractions `json:"useractions"`
	Valid       bool        `json:"valid"` // Valid is true if Useractions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUseractions) Scan(value interface{}) error {
	if value == nil {
		ns.Useractions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Useractions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUseractions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Useractions), nil
}

type Publickey struct {
	ID     ulid.ULID `json:"id"`
	Pubkey []byte    `json:"pubkey"`
}

type Token struct {
	ID        ulid.ULID          `json:"id"`
	Creatorid ulid.ULID          `json:"creatorid"`
	Keyid     ulid.ULID          `json:"keyid"`
	Tokenname string             `json:"tokenname"`
	Expiresat pgtype.Timestamptz `json:"expiresat"`
	Isrevoked bool               `json:"isrevoked"`
	Revokedby pgtype.UUID        `json:"revokedby"`
	Revokedat pgtype.Timestamptz `json:"revokedat"`
}

type Tokenlog struct {
	ID         ulid.ULID    `json:"id"`
	Userid     ulid.ULID    `json:"userid"`
	Tokenid    ulid.ULID    `json:"tokenid"`
	Actiontype Tokenactions `json:"actiontype"`
}

type Usagelog struct {
	ID       ulid.ULID    `json:"id"`
	Tokenid  ulid.ULID    `json:"tokenid"`
	Callerip netip.Prefix `json:"callerip"`
	Subject  string       `json:"subject"`
	Sender   string       `json:"sender"`
	Receiver string       `json:"receiver"`
}

type User struct {
	ID        ulid.ULID          `json:"id"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
	Role      Roles              `json:"role"`
	Updatedat pgtype.Timestamptz `json:"updatedat"`
}

type Userlog struct {
	ID         ulid.ULID    `json:"id"`
	Userid     ulid.ULID    `json:"userid"`
	Actiontype Useractions  `json:"actiontype"`
	Ipaddr     netip.Prefix `json:"ipaddr"`
	Useragent  string       `json:"useragent"`
}
