// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user-logs.sql

package db

import (
	"context"
	"net/netip"

	"github.com/oklog/ulid"
)

const addUserLogs = `-- name: AddUserLogs :one
INSERT INTO UserLogs(
    Id, UserId, ActionType, IPAddr, UserAgent
) VALUES ($1, $2, $3, $4, $5) RETURNING id, userid, actiontype, ipaddr, useragent
`

type AddUserLogsParams struct {
	ID         ulid.ULID    `json:"id"`
	Userid     ulid.ULID    `json:"userid"`
	Actiontype Useractions  `json:"actiontype"`
	Ipaddr     netip.Prefix `json:"ipaddr"`
	Useragent  string       `json:"useragent"`
}

func (q *Queries) AddUserLogs(ctx context.Context, arg AddUserLogsParams) (Userlog, error) {
	row := q.db.QueryRow(ctx, addUserLogs,
		arg.ID,
		arg.Userid,
		arg.Actiontype,
		arg.Ipaddr,
		arg.Useragent,
	)
	var i Userlog
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Actiontype,
		&i.Ipaddr,
		&i.Useragent,
	)
	return i, err
}

const deleteUserLogs = `-- name: DeleteUserLogs :exec
DELETE FROM UserLogs WHERE Id = $1
`

func (q *Queries) DeleteUserLogs(ctx context.Context, id ulid.ULID) error {
	_, err := q.db.Exec(ctx, deleteUserLogs, id)
	return err
}

const getUserLogs = `-- name: GetUserLogs :many
SELECT id, userid, actiontype, ipaddr, useragent FROM UserLogs
`

func (q *Queries) GetUserLogs(ctx context.Context) ([]Userlog, error) {
	rows, err := q.db.Query(ctx, getUserLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Userlog{}
	for rows.Next() {
		var i Userlog
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Actiontype,
			&i.Ipaddr,
			&i.Useragent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLogsByActionType = `-- name: GetUserLogsByActionType :many
SELECT id, userid, actiontype, ipaddr, useragent FROM UserLogs WHERE ActionType = $1
`

func (q *Queries) GetUserLogsByActionType(ctx context.Context, actiontype Useractions) ([]Userlog, error) {
	rows, err := q.db.Query(ctx, getUserLogsByActionType, actiontype)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Userlog{}
	for rows.Next() {
		var i Userlog
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Actiontype,
			&i.Ipaddr,
			&i.Useragent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLogsByIP = `-- name: GetUserLogsByIP :many
SELECT id, userid, actiontype, ipaddr, useragent FROM UserLogs WHERE IPAddr = $1
`

func (q *Queries) GetUserLogsByIP(ctx context.Context, ipaddr netip.Prefix) ([]Userlog, error) {
	rows, err := q.db.Query(ctx, getUserLogsByIP, ipaddr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Userlog{}
	for rows.Next() {
		var i Userlog
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Actiontype,
			&i.Ipaddr,
			&i.Useragent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLogsByUserId = `-- name: GetUserLogsByUserId :many
SELECT id, userid, actiontype, ipaddr, useragent FROM UserLogs WHERE UserId = $1
`

func (q *Queries) GetUserLogsByUserId(ctx context.Context, userid ulid.ULID) ([]Userlog, error) {
	rows, err := q.db.Query(ctx, getUserLogsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Userlog{}
	for rows.Next() {
		var i Userlog
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Actiontype,
			&i.Ipaddr,
			&i.Useragent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
